-- Table for assigning users to teams
CREATE TABLE user_team (
  id BIGSERIAL PRIMARY KEY,
  user BIGINT NOT NULL,
  team BIGINT NOT NULL,
  team_admin BOOLEAN NOT NULL
);
COMMENT ON TABLE user_team IS 'Assigning user to teams, since a user can be part of multiple teams.';

-- Table for teams
CREATE TABLE teams (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL
);

-- Table for affected equipment
CREATE TABLE affected_equipment (
  id BIGSERIAL PRIMARY KEY,
  ticket BIGINT NOT NULL,
  equipment BIGINT NOT NULL
);

-- Table for ticket status types
CREATE TABLE ticket_status_types (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL
);

-- Table for users
CREATE TABLE "user" (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  password TEXT NOT NULL,
  logged_in BOOLEAN NOT NULL,
  admin BOOLEAN NOT NULL,
  email TEXT,
  phone NUMERIC
);

-- Table for comments
CREATE TABLE comments (
  id BIGSERIAL PRIMARY KEY,
  user BIGINT NOT NULL,
  ticket BIGINT NOT NULL,
  comment_text TEXT NOT NULL,
  comment_type BIGINT NOT NULL
);
COMMENT ON TABLE comments IS 'Comments for the tickets.';

-- Table for equipment
CREATE TABLE equipment (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  site TEXT NOT NULL,
  type BIGINT NOT NULL,
  last_change_ticket BIGINT,
  "1l_support_team" BIGINT NOT NULL,
  "2l_support_team" BIGINT NOT NULL,
  additional_info TEXT
);

-- Table for tickets
CREATE TABLE tickets (
  id BIGSERIAL PRIMARY KEY,
  type BIGINT NOT NULL,
  creator_id BIGINT NOT NULL,
  category BIGINT NOT NULL,
  owner_team BIGINT NOT NULL,
  status BIGINT NOT NULL,
  issue_started TIMESTAMP NOT NULL,
  issue_resolved TIMESTAMP NOT NULL
);

CREATE INDEX idx_tickets_id ON tickets (id);

-- Table for requested teams for tickets
CREATE TABLE ticket_requested_teams (
  id BIGSERIAL PRIMARY KEY,
  ticket BIGINT NOT NULL,
  team BIGINT NOT NULL,
  status BIGINT NOT NULL
);
COMMENT ON TABLE ticket_requested_teams IS 'Status if the team acknowledged the ticket (e.g., pending, refused).';

-- Table for comment types
CREATE TABLE comment_type (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL
);
COMMENT ON TABLE comment_type IS 'Type of comments (e.g., operator update, rejecting).';

-- Table for ticket types
CREATE TABLE ticket_types (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL
);
COMMENT ON TABLE ticket_types IS 'Types of tickets (e.g., incident, request, change).';

-- Table for equipment types
CREATE TABLE equipment_types (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL
);

-- Adding foreign key constraints
ALTER TABLE affected_equipment
  ADD CONSTRAINT fk_affected_equipment_equipment FOREIGN KEY (equipment) REFERENCES equipment (id),
  ADD CONSTRAINT fk_affected_equipment_ticket FOREIGN KEY (ticket) REFERENCES tickets (id);

ALTER TABLE comments
  ADD CONSTRAINT fk_comments_comment_type FOREIGN KEY (comment_type) REFERENCES comment_type (id),
  ADD CONSTRAINT fk_comments_ticket FOREIGN KEY (ticket) REFERENCES tickets (id),
  ADD CONSTRAINT fk_comments_user FOREIGN KEY (user) REFERENCES "user" (id);

ALTER TABLE equipment
  ADD CONSTRAINT fk_equipment_1l_support_team FOREIGN KEY ("1l_support_team") REFERENCES teams (id),
  ADD CONSTRAINT fk_equipment_2l_support_team FOREIGN KEY ("2l_support_team") REFERENCES teams (id),
  ADD CONSTRAINT fk_equipment_type FOREIGN KEY (type) REFERENCES equipment_types (id);

ALTER TABLE ticket_requested_teams
  ADD CONSTRAINT fk_ticket_requested_teams_status FOREIGN KEY (status) REFERENCES ticket_status_types (id),
  ADD CONSTRAINT fk_ticket_requested_teams_team FOREIGN KEY (team) REFERENCES teams (id),
  ADD CONSTRAINT fk_ticket_requested_teams_ticket FOREIGN KEY (ticket) REFERENCES tickets (id);

ALTER TABLE tickets
  ADD CONSTRAINT fk_tickets_creator FOREIGN KEY (creator_id) REFERENCES "user" (id),
  ADD CONSTRAINT fk_tickets_owner_team FOREIGN KEY (owner_team) REFERENCES teams (id),
  ADD CONSTRAINT fk_tickets_status FOREIGN KEY (status) REFERENCES ticket_status_types (id);

ALTER TABLE user_team
  ADD CONSTRAINT fk_user_team_team FOREIGN KEY (team) REFERENCES teams (id),
  ADD CONSTRAINT fk_user_team_user FOREIGN KEY (user) REFERENCES "user" (id);

